{"version":3,"sources":["components/three_components/objects/LowPolyJet.js","components/three_components/objects/AnimationExperiment.js","components/three_components/objects/WobblyTorus.js","components/three_components/scenes/Scene1.js","components/three_components/objects/LinesRobot.js","components/three_components/objects/OxygenContainer.js","components/three_components/objects/OxygenContainer2.js","components/three_components/objects/OxygenContainer3.js","components/three_components/objects/AbstractSphere.js","components/three_components/scenes/Scene2.js","components/three_components/scenes/Scene3.js","components/three_components/scenes/Scene4.js","store.js","components/three_components/ThreeCanvas.js","components/html_components/VideoSandbox.js","components/html_components/HTMLContent.js","App.js","reportWebVitals.js","index.js"],"names":["filePath","window","location","href","useGLTF","preload","WobblyTorus","props","group","useRef","randomRotationOffset","Math","random","useEffect","current","position","x","animationOffset","z","rotation","y","useFrame","clock","t","sin","getElapsedTime","dispose","castShadow","receiveShadow","ref","args","MeshDistortMaterial","color","smoothShading","roughness","metalness","distort","speed","Scene","sceneIndex","PerspectiveCamera","makeDefault","Stage","adjustCamera","contactShadow","shadows","fallback","Environment","preset","background","OxygenContainer","materialProps","clearcoat","clearcoatRoughness","normalMap","useTexture","normalScale","THREE","transmission","transparent","side","opacity","nodes","materials","geometry","Container","material","GlassDome","Glass","Container001","OxygenContainer3","reflectivity","exposure","envMapIntensity","AbstractSphere","Icosphere003","scale","flatShading","factor","wireframe","hdri","useControls","hint","options","value","intensity","OrbitControls","target","useStore","create","set","selectScene0","console","log","selectScene1","selectScene2","selectScene3","bears","increasePopulation","state","removeAllBears","ThreeCanvas","scenes","Scene1","Scene2","Scene3","Scene4","colorManagement","invalidateFrameloop","pixelRatio","React","createElement","Loader","Navigation","videoPath","autoPlay","muted","loop","id","src","type","HTMLContent","className","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.222b4605.chunk.js","sourcesContent":["/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, Suspense } from 'react'\r\nimport { useGLTF, useAnimations } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useEffect } from 'react'\r\n\r\nconst filePath = window.location.href + '/models/LowPolyJet.glb'\r\n\r\nfunction TheModel() {\r\n  const groupRef = useRef()\r\n  const shipRef = useRef()\r\n  const targetRef = useRef()\r\n  const camPositionRef = useRef()\r\n\r\n  const { scene, animations } = useGLTF(filePath)\r\n\r\n  const mixer = new THREE.AnimationMixer(scene)\r\n\r\n  const prepAnimation = (rawData) => {\r\n    const animationClip = mixer.clipAction(rawData)\r\n    animationClip.setLoop( THREE.LoopOnce )\r\n    animationClip.clampWhenFinished = true\r\n    animationClip.play()\r\n  }\r\n\r\n  useEffect(() => {\r\n    const a1 = mixer.clipAction(animations[0])\r\n    const a2 = mixer.clipAction(animations[1])\r\n    const a3 = mixer.clipAction(animations[2])\r\n\r\n    a1.setLoop( THREE.LoopOnce )\r\n    a2.setLoop( THREE.LoopOnce )\r\n    a3.setLoop( THREE.LoopOnce )\r\n\r\n    a1.clampWhenFinished = true\r\n    a2.clampWhenFinished = true\r\n    a3.clampWhenFinished = true\r\n    \r\n    a1.play()\r\n    a2.play()\r\n    a3.play()\r\n\r\n    console.log(groupRef.current.children)\r\n    shipRef.current = groupRef.current.children.find(item => item.name === 'Ship')\r\n    targetRef.current = groupRef.current.children.find(item => item.name === 'CameraTarget')\r\n    camPositionRef.current = groupRef.current.children.find(item => item.name === 'CamPosition')\r\n\r\n    console.log(targetRef.current)\r\n  })\r\n\r\n  useFrame((state, delta) => {\r\n    mixer.update(delta);\r\n    state.camera.lookAt(targetRef.current.position)\r\n    state.camera.position.x = camPositionRef.current.position.x\r\n    state.camera.position.y = camPositionRef.current.position.y\r\n    state.camera.position.z = camPositionRef.current.position.z\r\n\r\n    // console.log(targetRef.current.position)\r\n\r\n    targetRef.current.scale.x = .001\r\n    targetRef.current.scale.y = .001\r\n    targetRef.current.scale.z = .001\r\n  });\r\n\r\n  return <primitive ref={groupRef} object={scene} position={[0, 0, 0]} />;\r\n}\r\n\r\nexport default function Model(props) {\r\n  return (\r\n    <group {...props} dispose={null}>\r\n      <Suspense fallback={null}>\r\n        <TheModel />\r\n      </Suspense>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, Suspense } from 'react'\r\nimport { useGLTF, useAnimations } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from '@react-three/fiber'\r\n\r\nconst filePath = window.location.href + '/models/AnimationExperiment.glb'\r\n\r\nfunction TheModel() {\r\n  let mixer = null;\r\n  const { scene, animations } =  useGLTF(filePath)\r\n  mixer = new THREE.AnimationMixer(scene);\r\n\r\n  console.log(animations)\r\n\r\n  void mixer.clipAction(animations[0]).play();\r\n\r\n  useFrame((state, delta) => {\r\n    mixer.update(delta);\r\n  });\r\n\r\n  return <primitive object={scene} position={[0, 0, 0]} />;\r\n}\r\n\r\nexport default function Model(props) {\r\n  const group = useRef()\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <Suspense fallback={null}>\r\n        <TheModel />\r\n      </Suspense>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useGLTF, MeshDistortMaterial } from '@react-three/drei'\r\nimport { useEffect } from 'react';\r\n\r\nexport default function WobblyTorus(props) {\r\n  const group = useRef()\r\n  const randomRotationOffset = Math.random() * 180\r\n\r\n  useEffect(() => {\r\n    group.current.position.x = props.animationOffset ? props.animationOffset[0] : 0\r\n    group.current.position.z = props.animationOffset ? props.animationOffset[2] : 0\r\n    group.current.rotation.x = randomRotationOffset\r\n    group.current.rotation.y = randomRotationOffset\r\n    group.current.rotation.z = randomRotationOffset\r\n  });\r\n\r\n  useFrame(({ clock }) => {\r\n    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2\r\n    group.current.position.y = (t / 3) + props.animationOffset ? props.animationOffset[1] : 0\r\n    group.current.rotation.x = group.current.rotation.z += 0.009\r\n  })\r\n\r\n\r\n  return (\r\n    <group  {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        ref={group}\r\n      >\r\n        <torusKnotBufferGeometry args={[.5, 0.25, 128, 32]} />\r\n        <MeshDistortMaterial\r\n          color={props.color}\r\n          smoothShading\r\n\r\n          roughness={0}\r\n          metalness={1}\r\n\r\n          distort={.1}\r\n          speed={1}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n","import LowPolyJet from '../objects/LowPolyJet'\r\nimport Box from '../objects/Box'\r\nimport AnimationExperiment from '../objects/AnimationExperiment'\r\nimport WobblyTorus from '../objects/WobblyTorus'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera, Environment, useTexture } from '@react-three/drei';\r\nimport { useFrame } from '@react-three/fiber';\r\nimport React, { useState, useEffect, useRef, Suspense } from 'react';\r\nimport { useControls } from \"leva\"\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  return (\r\n    <>\r\n      <PerspectiveCamera makeDefault position={[0, 1, 5]} />\r\n      {/* <OrbitControls target={[1, 1, 0]} /> */}  \r\n\r\n      <Stage adjustCamera={false} contactShadow={true} shadows={true}>\r\n\r\n        {/* <Box position={[0,0,0]} scale={[1,1,1]}/> */}\r\n        {/* <Box position={[0,0,-30]}/> */}\r\n\r\n        <Suspense fallback={null}>\r\n          <Environment preset={'city'} background={false} />\r\n        </Suspense>\r\n\r\n        {/* <LowPolyJet /> */}\r\n        {/* <AnimationExperiment /> */}\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\n\r\nconst filePath = window.location.href + '/models/Robot.glb'\r\n\r\nexport default function LinesRobot(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0,\r\n    metalness: 0.65,\r\n    roughness: 0.3,\r\n    color: 'blue',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [30, 30],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: 0.6,\r\n    transparent: true\r\n  }\r\n\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF(filePath)\r\n\r\n  const edges = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_1.geometry), [nodes])\r\n  const edges1 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_2.geometry), [nodes])\r\n  const edges2 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\r\n  const edges3 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\r\n\r\n  // Rotate mesh every frame, this is outside of React without overhead\r\n  useFrame(() => {\r\n    if (group.current != null) {\r\n      group.current.rotation.y = group.current.rotation.y += 0.003\r\n    }\r\n  })\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group position={[0, .85, 0]}>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_1.geometry}\r\n          material={materials.Mat1}\r\n        >\r\n        </mesh>\r\n        <lineSegments geometry={edges}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges1}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges2}>\r\n          <lineBasicMaterial color=\"black\"  />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges3}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_2.geometry}\r\n          material={materials.Mat2}\r\n        />\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n          <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} />\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_4.geometry}\r\n          material={materials.Mat4}\r\n        >\r\n\r\n        </mesh>\r\n      </group>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Cube002.geometry}\r\n        material={materials['Material.001']}\r\n        position={[0, .85, 0.03]}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9} />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\r\n\r\nexport default function OxygenContainer(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0,\r\n    metalness: 0.65,\r\n    roughness: 0.3,\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [60, 60],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: 0.99,\r\n    transparent: true,\r\n    side: THREE.DoubleSide,\r\n    opacity: 0.2,\r\n    color: 'teal'\r\n  }\r\n\r\n  const group = useRef()\r\n\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container.geometry}\r\n        material={materials['Material.003']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.GlassDome.geometry}\r\n        material={materials.Glass}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps}/>\r\n      </mesh>\r\n      \r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container001.geometry}\r\n        material={materials['Material.002']}\r\n        position={[0, 0.01, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\r\n\r\nexport default function OxygenContainer2(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0.2,\r\n    metalness: 0.0,\r\n    roughness: 0.1,\r\n    color: 'teal',\r\n    // color: '#195e23',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [90, 90],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: 0.93,\r\n    transparent: true,\r\n    opacity: 1\r\n  }\r\n\r\n  const group = useRef()\r\n\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container.geometry}\r\n        material={materials['Material.003']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.GlassDome.geometry}\r\n        material={materials.Glass}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps}  />\r\n      </mesh>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container001.geometry}\r\n        material={materials['Material.002']}\r\n        position={[0, 0.01, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\r\n\r\nexport default function OxygenContainer3(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    // clearcoat: 1.0,\r\n    // clearcoatRoughness: 0.2,\r\n    metalness: 0.0,\r\n    roughness: 0.0,\r\n    color: '#6cccf5',\r\n    // color: 'blue',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    reflectivity: .5,\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [90, 90],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: .9,\r\n    transparent: true,\r\n    opacity: 1,\r\n    exposure: 1,\r\n    envMapIntensity: 1\r\n  }\r\n\r\n  const group = useRef()\r\n\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh \r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container.geometry}\r\n        material={materials['Material.003']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.GlassDome.geometry}\r\n        material={materials.Glass}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps}  />\r\n      </mesh>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container001.geometry}\r\n        material={materials['Material.002']}\r\n        position={[0, 0.01, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useGLTF, MeshDistortMaterial } from '@react-three/drei'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useEffect } from 'react';\r\n\r\nconst filePath = window.location.href + '/models/AbstractSphere.glb'\r\n\r\nexport default function AbstractSphere(props) {\r\n  const group = useRef()\r\n  const { nodes } = useGLTF(filePath)\r\n  const randomRotationOffset = Math.random() * 180\r\n\r\n  useEffect(() => {\r\n    group.current.position.x = props.animationOffset ? props.animationOffset[0] : 0\r\n    group.current.position.z = props.animationOffset ? props.animationOffset[2] : 0\r\n    group.current.rotation.x = randomRotationOffset\r\n    group.current.rotation.y = randomRotationOffset\r\n    group.current.rotation.z = randomRotationOffset\r\n  });\r\n\r\n  useFrame(({ clock }) => {\r\n    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2\r\n    group.current.position.y = (t / 3) + props.animationOffset ? props.animationOffset[1] : 0\r\n    group.current.rotation.x = group.current.rotation.z += 0.005\r\n  })\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null} position={[0,1.2,0]}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Icosphere003.geometry}\r\n        material={nodes.Icosphere003.material}\r\n        scale={[1.06, 1.06, 1.06]}\r\n      >\r\n        <mesh geometry={nodes.Icosphere003.geometry} castShadow receiveShadow>\r\n          <MeshDistortMaterial color={props.color} flatShading roughness={1} metalness={0.5} factor={15} speed={5} />\r\n        </mesh>\r\n        <mesh geometry={nodes.Icosphere003.geometry}>\r\n          <meshBasicMaterial wireframe color={props.color}/>\r\n        </mesh>\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport WobblyTorus from '../objects/WobblyTorus'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera, Environment, useTexture } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\nimport { useControls } from \"leva\"\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentControls = {\r\n    hint: 'HDRI Lighting',\r\n    options: [\r\n      'city',\r\n      'sunset',\r\n      'forest',\r\n    ],\r\n    value: 'city',\r\n  }\r\n\r\n  const { hdri } = useControls('environment/lighting', { hdri: environmentControls })\r\n\r\n  return (\r\n    <>\r\n      <PerspectiveCamera makeDefault position={[0, 4, 13]} />\r\n\r\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\r\n        <OrbitControls target={[1, 1, 0]} />\r\n\r\n        <OxygenContainer3 position={[0, 0, 0]}/>\r\n        <WobblyTorus position={[0, 2.5, 0]} rotation={[0, 90, 0]} />\r\n\r\n        <Suspense fallback={null}>\r\n          <Environment preset={hdri} background={false} />\r\n        </Suspense>\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentOptions = [\r\n    'studio',\r\n    'sunset',\r\n    'dawn',\r\n    'night',\r\n    'warehouse',\r\n    'forest',\r\n    'apartment',\r\n    'city',\r\n    'park',\r\n    'lobby',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <PerspectiveCamera makeDefault position={[0, 4, 13]} />\r\n      <OrbitControls target={[1, 1, 0]} />\r\n\r\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\r\n        <OxygenContainer position={[-6, 0, 0]} rotation={[0, 90, 0]} />\r\n        <AbstractSphere animationOffset={[-6, 2, 0]} color=\"black\" />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[-6, 2, 0]} color=\"black\" />\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentOptions = [\r\n    'park',\r\n    'sunset',\r\n    'dawn',\r\n    'night',\r\n    'warehouse',\r\n    'forest',\r\n    'apartment',\r\n    'studio',\r\n    'city',\r\n    'lobby',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <PerspectiveCamera makeDefault position={[0, 4, 13]} />\r\n      <OrbitControls target={[1, 1, 0]} />\r\n\r\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\r\n        <OxygenContainer3 rotation={[0, 90, 0]} position={[12, 0, 0]} />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[6, 2, 0]} color=\"red\" />\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","import create from 'zustand'\r\n\r\nconst useStore = create(set => ({\r\n  sceneIndex: 0,\r\n  selectScene0: () => set(() => {\r\n    console.log(\"HERE\")\r\n    return { sceneIndex: 0 }\r\n  }),\r\n  selectScene1: () => set(() => ({ sceneIndex: 1 })),\r\n  selectScene2: () => set(() => ({ sceneIndex: 2 })),\r\n  selectScene3: () => set(() => ({ sceneIndex: 3 })),\r\n  bears: 0,\r\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\r\n  removeAllBears: () => set({ bears: 0 })\r\n}))\r\n\r\nexport default useStore","import { OrbitControls, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { Suspense } from 'react';\r\n\r\nimport Scene1 from './scenes/Scene1';\r\nimport Scene2 from './scenes/Scene2';\r\nimport Scene3 from './scenes/Scene3';\r\nimport Scene4 from './scenes/Scene4';\r\n\r\nimport useStore from '../../store'\r\n\r\nexport default function ThreeCanvas() {\r\n  const scenes = [\r\n    Scene1,\r\n    Scene2,\r\n    Scene3,\r\n    Scene4\r\n  ]\r\n\r\n  const sceneIndex = useStore(state => state.sceneIndex)\r\n\r\n  return (\r\n    <>\r\n      <Canvas colorManagement={true} invalidateFrameloop pixelRatio={[1, 2]}>\r\n\r\n        <Suspense fallback={null}>\r\n          {React.createElement(scenes[sceneIndex])}\r\n        </Suspense>\r\n\r\n        {/* <Stats /> */}\r\n\r\n\r\n\r\n      </Canvas>\r\n\r\n      <Loader />\r\n    </>\r\n  );\r\n}\r\n\r\n","import useStore from '../../store'\r\nimport ReactPlayer from 'react-player'\r\n\r\nexport default function Navigation() {\r\n  // const selectScene0 = useStore(state => state.selectScene0)\r\n  const videoPath = window.location.href + '/video/composite/abstract1.mp4'\r\n\r\n  return (\r\n    <>\r\n      <video autoPlay muted loop id=\"myVideo\">\r\n        <source src={videoPath} type=\"video/mp4\" />\r\n      </video>\r\n\r\n      {/* <div class=\"content\">\r\n        <h1>Heading</h1>\r\n        <p>Lorem ipsum dolor sit amet, an his etiam torquatos. Tollit soleat phaedrum te duo, eum cu recteque expetendis neglegentur. Cu mentitum maiestatis persequeris pro, pri ponderum tractatos ei. Id qui nemore latine molestiae, ad mutat oblique delicatissimi pro.</p>\r\n        <button id=\"myBtn\" onClick=\"myFunction()\">Pause</button>\r\n      </div> */}\r\n    </>\r\n  )\r\n}","// HTMLContent.js\r\n// Throw all the raw HTML content here. This is all rendered outside the context of the canvas,\r\n// so don't try to do anything fancy with Three.js.\r\n\r\nimport Menu from './Menu'\r\nimport ButtonNavigation from './ButtonNavigation'\r\nimport VideoSandbox from './VideoSandbox'\r\nimport useStore from '../../store'\r\n\r\nexport default function HTMLContent() {\r\n  return (\r\n    <div className=\"html-content-container\">\r\n      {/* <Menu /> */}\r\n      {/* <ButtonNavigation/> */}\r\n      <VideoSandbox/>\r\n    </div>\r\n  )\r\n}","import './App.css';\r\nimport ThreeCanvas from './components/three_components/ThreeCanvas'\r\nimport HTMLContent from './components/html_components/HTMLContent'\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport useStore from './store.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <HTMLContent/>\r\n      <ThreeCanvas/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}