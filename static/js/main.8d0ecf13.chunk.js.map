{"version":3,"sources":["components/three_components/objects/LinesRobot.js","components/three_components/objects/OxygenContainer.js","components/three_components/objects/WobblyTorus.js","components/three_components/objects/OxygenContainer2.js","components/three_components/objects/OxygenContainer3.js","components/three_components/objects/AbstractSphere.js","components/three_components/scenes/Scene1.js","components/three_components/scenes/Scene2.js","components/three_components/scenes/Scene3.js","components/three_components/scenes/Scene4.js","store.js","components/three_components/ThreeCanvas.js","components/html_components/HTMLContent.js","App.js","reportWebVitals.js","index.js"],"names":["filePath","window","location","href","useGLTF","preload","OxygenContainer","props","materialProps","clearcoat","clearcoatRoughness","metalness","roughness","normalMap","useTexture","normalScale","THREE","transmission","transparent","side","opacity","color","group","useRef","nodes","materials","ref","dispose","castShadow","receiveShadow","geometry","Container","material","GlassDome","Glass","Container001","position","WobblyTorus","Math","random","useEffect","useFrame","clock","t","sin","getElapsedTime","current","y","animationOffset","rotation","x","z","args","MeshDistortMaterial","smoothShading","distort","speed","OxygenContainer2","OxygenContainer3","reflectivity","exposure","envMapIntensity","AbstractSphere","randomRotationOffset","Icosphere003","scale","flatShading","factor","wireframe","Scene","sceneIndex","hdri","useControls","hint","options","value","console","log","Stage","adjustCamera","contactShadow","shadows","fallback","Environment","preset","background","intensity","useStore","create","set","selectScene0","selectScene1","selectScene2","selectScene3","bears","increasePopulation","state","removeAllBears","ThreeCanvas","scenes","Scene1","Scene2","Scene3","Scene4","colorManagement","invalidateFrameloop","pixelRatio","React","createElement","PerspectiveCamera","makeDefault","OrbitControls","target","Loader","Navigation","className","style","justifyContent","onClick","HTMLContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d0ecf13.chunk.js","sourcesContent":["/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\n\r\nconst filePath = window.location.href + '/models/Robot.glb'\r\n\r\nexport default function LinesRobot(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0,\r\n    metalness: 0.65,\r\n    roughness: 0.3,\r\n    color: 'blue',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [30, 30],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: 0.6,\r\n    transparent: true\r\n  }\r\n\r\n  const group = useRef()\r\n  const { nodes, materials } = useGLTF(filePath)\r\n\r\n  const edges = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_1.geometry), [nodes])\r\n  const edges1 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_2.geometry), [nodes])\r\n  const edges2 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\r\n  const edges3 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\r\n\r\n  // Rotate mesh every frame, this is outside of React without overhead\r\n  useFrame(() => {\r\n    if (group.current != null) {\r\n      group.current.rotation.y = group.current.rotation.y += 0.003\r\n    }\r\n  })\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <group position={[0, .85, 0]}>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_1.geometry}\r\n          material={materials.Mat1}\r\n        >\r\n        </mesh>\r\n        <lineSegments geometry={edges}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges1}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges2}>\r\n          <lineBasicMaterial color=\"black\"  />\r\n        </lineSegments>\r\n        <lineSegments geometry={edges3}>\r\n          <lineBasicMaterial color=\"black\" />\r\n        </lineSegments>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_2.geometry}\r\n          material={materials.Mat2}\r\n        />\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_3.geometry}\r\n          material={materials.Mat3}\r\n        >\r\n          <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} />\r\n        </mesh>\r\n        <mesh\r\n          castShadow\r\n          receiveShadow\r\n          geometry={nodes.Cube001_4.geometry}\r\n          material={materials.Mat4}\r\n        >\r\n\r\n        </mesh>\r\n      </group>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Cube002.geometry}\r\n        material={materials['Material.001']}\r\n        position={[0, .85, 0.03]}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9} />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\r\n\r\nexport default function OxygenContainer(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0,\r\n    metalness: 0.65,\r\n    roughness: 0.3,\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [60, 60],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: 0.99,\r\n    transparent: true,\r\n    side: THREE.DoubleSide,\r\n    opacity: 0.2,\r\n    color: 'teal'\r\n  }\r\n\r\n  const group = useRef()\r\n\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container.geometry}\r\n        material={materials['Material.003']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.GlassDome.geometry}\r\n        material={materials.Glass}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps}/>\r\n      </mesh>\r\n      \r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container001.geometry}\r\n        material={materials['Material.002']}\r\n        position={[0, 0.01, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useGLTF, MeshDistortMaterial } from '@react-three/drei'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useEffect } from 'react';\r\n\r\nconst filePath = window.location.href + '/models/AbstractSphere.glb'\r\n\r\nexport default function WobblyTorus(props) {\r\n  const group = useRef()\r\n  const { nodes } = useGLTF(filePath)\r\n  const randomRotationOffset = Math.random() * 180\r\n\r\n  useEffect(() => {\r\n    // group.current.position.x = props.animationOffset[0] \r\n    // group.current.position.z = props.animationOffset[2]\r\n    // group.current.rotation.x = randomRotationOffset\r\n    // group.current.rotation.y = randomRotationOffset\r\n    // group.current.rotation.z = randomRotationOffset\r\n  });\r\n\r\n  useFrame(({ clock }) => {\r\n    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2\r\n    group.current.position.y = (t / 3) + props.animationOffset[1]\r\n    group.current.rotation.x = group.current.rotation.z += 0.007\r\n  })\r\n\r\n  return (\r\n    <group  {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        position={[6, 2, 0]}\r\n        ref={group}\r\n      >\r\n        <torusKnotBufferGeometry args={[.5, 0.25, 128, 32]} />\r\n        <MeshDistortMaterial\r\n          color={props.color}\r\n          smoothShading\r\n\r\n          roughness={0}\r\n          metalness={1}\r\n\r\n          distort={.1}\r\n          speed={1}\r\n        />\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\r\n\r\nexport default function OxygenContainer2(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    clearcoat: 1.0,\r\n    clearcoatRoughness: 0.2,\r\n    metalness: 0.0,\r\n    roughness: 0.1,\r\n    color: 'teal',\r\n    // color: '#195e23',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [90, 90],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: 0.93,\r\n    transparent: true,\r\n    opacity: 1\r\n  }\r\n\r\n  const group = useRef()\r\n\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container.geometry}\r\n        material={materials['Material.003']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.GlassDome.geometry}\r\n        material={materials.Glass}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps}  />\r\n      </mesh>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container001.geometry}\r\n        material={materials['Material.002']}\r\n        position={[0, 0.01, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import React, { useRef, useMemo } from 'react'\r\nimport { useGLTF, useTexture } from '@react-three/drei'\r\nimport * as THREE from 'three'\r\nimport { useFrame } from \"@react-three/fiber\"\r\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\r\n\r\nexport default function OxygenContainer3(props) {\r\n  const texture = useTexture(window.location.href + '/images/flakes.png')\r\n\r\n  const materialProps = {\r\n    // clearcoat: 1.0,\r\n    // clearcoatRoughness: 0.2,\r\n    metalness: 0.0,\r\n    roughness: 0.0,\r\n    color: '#6cccf5',\r\n    // color: 'blue',\r\n    normalMap: texture,\r\n    normalScale: [0.3, 0.3],\r\n    reflectivity: .5,\r\n    'normalMap-wrapS': THREE.RepeatWrapping,\r\n    'normalMap-wrapT': THREE.RepeatWrapping,\r\n    'normalMap-repeat': [90, 90],\r\n    'normalMap-anisotropy': 16,\r\n    transmission: .9,\r\n    transparent: true,\r\n    opacity: 1,\r\n    exposure: 1,\r\n    envMapIntensity: 1\r\n  }\r\n\r\n  const group = useRef()\r\n\r\n  const { nodes, materials } = useGLTF(filePath)\r\n  return (\r\n    <group ref={group} {...props} dispose={null}>\r\n      <mesh \r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container.geometry}\r\n        material={materials['Material.003']}\r\n      />\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.GlassDome.geometry}\r\n        material={materials.Glass}\r\n      >\r\n        <meshPhysicalMaterial {...materialProps}  />\r\n      </mesh>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Container001.geometry}\r\n        material={materials['Material.002']}\r\n        position={[0, 0.01, 0]}\r\n      />\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","/*\r\nAuto-generated by: https://github.com/pmndrs/gltfjsx\r\n*/\r\n\r\nimport React, { useRef } from 'react'\r\nimport { useGLTF, MeshDistortMaterial } from '@react-three/drei'\r\nimport { useFrame } from '@react-three/fiber'\r\nimport { useEffect } from 'react';\r\n\r\nconst filePath = window.location.href + '/models/AbstractSphere.glb'\r\n\r\nexport default function AbstractSphere(props) {\r\n  const group = useRef()\r\n  const { nodes } = useGLTF(filePath)\r\n  const randomRotationOffset = Math.random() * 180\r\n\r\n  useEffect(() => {\r\n    group.current.position.x = props.animationOffset[0]\r\n    group.current.position.z = props.animationOffset[2]\r\n    group.current.rotation.x = randomRotationOffset\r\n    group.current.rotation.y = randomRotationOffset\r\n    group.current.rotation.z = randomRotationOffset\r\n  });\r\n\r\n  useFrame(({ clock }) => {\r\n    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2\r\n    group.current.position.y = (t / 3) + props.animationOffset[1]\r\n    group.current.rotation.x = group.current.rotation.z += 0.005\r\n  })\r\n\r\n  return (\r\n    <group ref={group} {...props} dispose={null} position={[0,1.2,0]}>\r\n      <mesh\r\n        castShadow\r\n        receiveShadow\r\n        geometry={nodes.Icosphere003.geometry}\r\n        material={nodes.Icosphere003.material}\r\n        scale={[1.06, 1.06, 1.06]}\r\n      >\r\n        <mesh geometry={nodes.Icosphere003.geometry} castShadow receiveShadow>\r\n          <MeshDistortMaterial color={props.color} flatShading roughness={1} metalness={0.5} factor={15} speed={5} />\r\n        </mesh>\r\n        <mesh geometry={nodes.Icosphere003.geometry}>\r\n          <meshBasicMaterial wireframe color={props.color}/>\r\n        </mesh>\r\n      </mesh>\r\n    </group>\r\n  )\r\n}\r\n\r\nuseGLTF.preload(filePath)\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport WobblyTorus from '../objects/WobblyTorus'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera, Environment, useTexture } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\n\r\nimport { useControls } from \"leva\"\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentControls = {\r\n    hint: 'HDRI Lighting',\r\n    options: [\r\n      'city',\r\n      'sunset',\r\n      // 'dawn',\r\n      // 'night',\r\n      // 'warehouse',\r\n      'forest',\r\n      // 'apartment',\r\n      // 'studio',\r\n      // 'park',\r\n      // 'lobby',\r\n    ],\r\n    value: 'forest',\r\n  }\r\n\r\n  const { hdri } = useControls('environment/lighting', { hdri: environmentControls })\r\n\r\n  console.log(hdri)\r\n\r\n  return (\r\n    <>\r\n      <Stage adjustCamera={false} contactShadow={true} shadows={true}>\r\n        <Suspense fallback={null}>\r\n          <Environment preset={hdri} background={false} />\r\n        </Suspense>\r\n        <OxygenContainer3 rotation={[0, 90, 0]} position={[6, 0, 0]} />\r\n        <WobblyTorus animationOffset={[6, 2, 0]} />\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera, Environment } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentOptions = [\r\n    'warehouse',\r\n    'sunset',\r\n    'dawn',\r\n    'night',\r\n    'forest',\r\n    'apartment',\r\n    'studio',\r\n    'city',\r\n    'park',\r\n    'lobby',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      {/* <color attach=\"background\" args={\"black\"} /> */}\r\n\r\n      <Stage adjustCamera={false} contactShadow={true} shadows={true} >\r\n        {/* <Environment preset={environmentOptions[4]} background={false}/> */}\r\n\r\n        <OxygenContainer2 rotation={[0, 80, 0]} />\r\n        <AbstractSphere animationOffset={[0, 2, 0]} color=\"#bbbbbb\" />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[0, 2, 0]} color=\"#bbbbbb\" />\r\n\r\n        {/* <OxygenContainer3 rotation={[0, 90, 0]} position={[6, 0, 0]} />\r\n        <AbstractSphere animationOffset={[6, 2, 0]} color=\"red\" />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[6, 2, 0]} color=\"red\" /> */}\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentOptions = [\r\n    'studio',\r\n    'sunset',\r\n    'dawn',\r\n    'night',\r\n    'warehouse',\r\n    'forest',\r\n    'apartment',\r\n    'city',\r\n    'park',\r\n    'lobby',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      {/* <directionalLight position={[-10, -10, -5]} intensity={1} /> */}\r\n      {/* <ambientLight /> */}\r\n      {/* <pointLight position={[10, 10, 10]} /> */}\r\n\r\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\r\n        <OxygenContainer position={[-6, 0, 0]} rotation={[0, 90, 0]} />\r\n        <AbstractSphere animationOffset={[-6, 2, 0]} color=\"black\" />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[-6, 2, 0]} color=\"black\" />\r\n\r\n       {/*  <OxygenContainer2 rotation={[0, 80, 0]} />\r\n        <AbstractSphere animationOffset={[0, 2, 0]} color=\"#bbbbbb\" />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[0, 2, 0]} color=\"#bbbbbb\" /> \r\n\r\n        <OxygenContainer3 rotation={[0, 90, 0]} position={[6, 0, 0]} />\r\n        <AbstractSphere animationOffset={[6, 2, 0]} color=\"red\" />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[6, 2, 0]} color=\"red\" />*/}\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","import LinesRobot from '../objects/LinesRobot'\r\nimport OxygenContainer from '../objects/OxygenContainer'\r\nimport OxygenContainer2 from '../objects/OxygenContainer2'\r\nimport OxygenContainer3 from '../objects/OxygenContainer3'\r\nimport AbstractSphere from '../objects/AbstractSphere'\r\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { useState, useEffect, Suspense } from 'react';\r\n\r\nexport default function Scene({ sceneIndex }) {\r\n  const environmentOptions = [\r\n    'park',\r\n    'sunset',\r\n    'dawn',\r\n    'night',\r\n    'warehouse',\r\n    'forest',\r\n    'apartment',\r\n    'studio',\r\n    'city',\r\n    'lobby',\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\r\n        <OxygenContainer3 rotation={[0, 90, 0]} position={[12, 0, 0]} />\r\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[6, 2, 0]} color=\"red\" />\r\n      </Stage>\r\n    </>\r\n  );\r\n}\r\n\r\n","import create from 'zustand'\r\n\r\nconst useStore = create(set => ({\r\n  sceneIndex: 0,\r\n  selectScene0: () => set(() => {\r\n    console.log(\"HERE\")\r\n    return { sceneIndex: 0 }\r\n  }),\r\n  selectScene1: () => set(() => ({ sceneIndex: 1 })),\r\n  selectScene2: () => set(() => ({ sceneIndex: 2 })),\r\n  selectScene3: () => set(() => ({ sceneIndex: 3 })),\r\n  bears: 0,\r\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\r\n  removeAllBears: () => set({ bears: 0 })\r\n}))\r\n\r\nexport default useStore","import { OrbitControls, Loader, PerspectiveCamera } from '@react-three/drei';\r\nimport { Canvas } from '@react-three/fiber';\r\nimport React, { Suspense } from 'react';\r\n\r\nimport Scene1 from './scenes/Scene1';\r\nimport Scene2 from './scenes/Scene2';\r\nimport Scene3 from './scenes/Scene3';\r\nimport Scene4 from './scenes/Scene4';\r\n\r\nimport useStore from '../../store'\r\n\r\nexport default function ThreeCanvas() {\r\n  const scenes = [\r\n    Scene1,\r\n    Scene2,\r\n    Scene3,\r\n    Scene4\r\n  ]\r\n\r\n  const sceneIndex = useStore(state => state.sceneIndex)\r\n\r\n  return (\r\n    <>\r\n      <Canvas colorManagement={true} invalidateFrameloop pixelRatio={[1, 2]}>\r\n\r\n        <Suspense fallback={null}>\r\n          {React.createElement(scenes[sceneIndex])}\r\n        </Suspense>\r\n\r\n        {/* <Stats /> */}\r\n        <PerspectiveCamera makeDefault position={[8, 4, 13]} />\r\n        <OrbitControls target={[1, 1, 0]} />\r\n\r\n      </Canvas>\r\n\r\n      <Loader />\r\n    </>\r\n  );\r\n}\r\n\r\n","// HTMLContent.js\r\n// Throw all the raw HTML content here. This is all rendered outside the context of the canvas,\r\n// so don't try to do anything fancy with Three.js.\r\n\r\nimport Menu from './Menu'\r\nimport useStore from '../../store'\r\n\r\nfunction Navigation() {\r\n  const selectScene0 = useStore(state => state.selectScene0)\r\n  const selectScene1 = useStore(state => state.selectScene1)\r\n  const selectScene2 = useStore(state => state.selectScene2)\r\n  const selectScene3 = useStore(state => state.selectScene3)\r\n\r\n  return (\r\n    <>\r\n      <div className='button-overlay'>\r\n        <div className='flex-container' style={{justifyContent: \"space-around\"}}>\r\n          <button className=\"btn\" onClick={selectScene0}>sandbox 1</button>\r\n          <button className=\"btn\" onClick={selectScene1}>sandbox 2</button>\r\n          <button className=\"btn\" onClick={selectScene2}>sandbox 3</button>\r\n          <button className=\"btn\" onClick={selectScene3}>sandbox 4</button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default function HTMLContent() {\r\n  return (\r\n    <div className=\"html-content-container\">\r\n      {/* <Menu /> */}\r\n      <Navigation></Navigation>\r\n    </div>\r\n  )\r\n}","import './App.css';\r\nimport ThreeCanvas from './components/three_components/ThreeCanvas'\r\nimport HTMLContent from './components/html_components/HTMLContent'\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport useStore from './store.js'\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <HTMLContent/>\r\n      <ThreeCanvas/>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}