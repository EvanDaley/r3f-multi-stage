{"version":3,"sources":["components/three_components/objects/LowPolyJet.js","components/three_components/objects/AnimationExperiment.js","components/three_components/scenes/Scene1.js","components/three_components/objects/LinesRobot.js","components/three_components/objects/OxygenContainer.js","components/three_components/objects/OxygenContainer2.js","components/three_components/objects/OxygenContainer3.js","components/three_components/objects/AbstractSphere.js","components/three_components/scenes/Scene2.js","components/three_components/scenes/Scene3.js","components/three_components/scenes/Scene4.js","store.js","components/three_components/ThreeCanvas.js","components/html_components/HTMLContent.js","App.js","reportWebVitals.js","index.js"],"names":["filePath","window","location","href","TheModel","groupRef","useRef","shipRef","targetRef","camPositionRef","useGLTF","scene","animations","mixer","THREE","useEffect","a1","clipAction","a2","a3","setLoop","clampWhenFinished","play","console","log","current","children","find","item","name","useFrame","state","delta","update","camera","lookAt","position","x","y","z","scale","ref","object","Model","props","dispose","fallback","preload","Scene","sceneIndex","useControls","hdri","hint","options","value","PerspectiveCamera","makeDefault","Stage","adjustCamera","contactShadow","shadows","Environment","preset","background","OxygenContainer","materialProps","clearcoat","clearcoatRoughness","metalness","roughness","normalMap","useTexture","normalScale","transmission","transparent","side","opacity","color","group","nodes","materials","castShadow","receiveShadow","geometry","Container","material","GlassDome","Glass","Container001","OxygenContainer3","reflectivity","exposure","envMapIntensity","AbstractSphere","randomRotationOffset","Math","random","animationOffset","rotation","clock","t","sin","getElapsedTime","Icosphere003","MeshDistortMaterial","flatShading","factor","speed","wireframe","intensity","OrbitControls","target","MidsectionPlane","plane","useThree","viewport","aspect","texture","useMemo","minFilter","adaptedHeight","width","height","adaptedWidth","attach","args","map","ReflectorPlane","Reflector","PI","resolution","mirror","mixBlur","Material","useStore","create","set","selectScene0","selectScene1","selectScene2","selectScene3","bears","increasePopulation","removeAllBears","ThreeCanvas","scenes","Scene1","Scene2","Scene3","Scene4","colorManagement","invalidateFrameloop","pixelRatio","React","createElement","Loader","Navigation","className","style","justifyContent","onClick","HTMLContent","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6eba508.chunk.js","sourcesContent":["/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, Suspense } from 'react'\nimport { useGLTF, useAnimations } from '@react-three/drei'\nimport * as THREE from 'three'\nimport { useFrame } from '@react-three/fiber'\nimport { useEffect } from 'react'\n\nconst filePath = window.location.href + '/models/LowPolyJet.glb'\n\nfunction TheModel() {\n  const groupRef = useRef()\n  const shipRef = useRef()\n  const targetRef = useRef()\n  const camPositionRef = useRef()\n\n  const { scene, animations } = useGLTF(filePath)\n\n  const mixer = new THREE.AnimationMixer(scene)\n\n  const prepAnimation = (rawData) => {\n    const animationClip = mixer.clipAction(rawData)\n    animationClip.setLoop( THREE.LoopOnce )\n    animationClip.clampWhenFinished = true\n    animationClip.play()\n  }\n\n  useEffect(() => {\n    const a1 = mixer.clipAction(animations[0])\n    const a2 = mixer.clipAction(animations[1])\n    const a3 = mixer.clipAction(animations[2])\n\n    a1.setLoop( THREE.LoopOnce )\n    a2.setLoop( THREE.LoopOnce )\n    a3.setLoop( THREE.LoopOnce )\n\n    a1.clampWhenFinished = true\n    a2.clampWhenFinished = true\n    a3.clampWhenFinished = true\n    \n    a1.play()\n    a2.play()\n    a3.play()\n\n    console.log(groupRef.current.children)\n    shipRef.current = groupRef.current.children.find(item => item.name === 'Ship')\n    targetRef.current = groupRef.current.children.find(item => item.name === 'CameraTarget')\n    camPositionRef.current = groupRef.current.children.find(item => item.name === 'CamPosition')\n\n    console.log(targetRef.current)\n  })\n\n  useFrame((state, delta) => {\n    mixer.update(delta);\n    state.camera.lookAt(targetRef.current.position)\n    state.camera.position.x = camPositionRef.current.position.x\n    state.camera.position.y = camPositionRef.current.position.y\n    state.camera.position.z = camPositionRef.current.position.z\n\n    // console.log(targetRef.current.position)\n\n    targetRef.current.scale.x = .001\n    targetRef.current.scale.y = .001\n    targetRef.current.scale.z = .001\n  });\n\n  return <primitive ref={groupRef} object={scene} position={[0, 0, 0]} />;\n}\n\nexport default function Model(props) {\n  return (\n    <group {...props} dispose={null}>\n      <Suspense fallback={null}>\n        <TheModel />\n      </Suspense>\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, Suspense } from 'react'\nimport { useGLTF, useAnimations } from '@react-three/drei'\nimport * as THREE from 'three'\nimport { useFrame } from '@react-three/fiber'\n\nconst filePath = window.location.href + '/models/AnimationExperiment.glb'\n\nfunction TheModel() {\n  let mixer = null;\n  const { scene, animations } =  useGLTF(filePath)\n  mixer = new THREE.AnimationMixer(scene);\n\n  console.log(animations)\n\n  void mixer.clipAction(animations[0]).play();\n\n  useFrame((state, delta) => {\n    mixer.update(delta);\n  });\n\n  return <primitive object={scene} position={[0, 0, 0]} />;\n}\n\nexport default function Model(props) {\n  const group = useRef()\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <Suspense fallback={null}>\n        <TheModel />\n      </Suspense>\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)","import LowPolyJet from '../objects/LowPolyJet'\nimport Box from '../objects/Box'\nimport AnimationExperiment from '../objects/AnimationExperiment'\nimport WobblyTorus from '../objects/WobblyTorus'\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera, Environment, useTexture } from '@react-three/drei';\nimport { useFrame } from '@react-three/fiber';\nimport React, { useState, useEffect, useRef, Suspense } from 'react';\n\nimport { useControls } from \"leva\"\n\nexport default function Scene({ sceneIndex }) {\n  const environmentControls = {\n    hint: 'HDRI Lighting',\n    options: [\n      'city',\n      'sunset',\n      // 'dawn',\n      // 'night',\n      // 'warehouse',\n      'forest',\n      // 'apartment',\n      // 'studio',\n      // 'park',\n      // 'lobby',\n    ],\n    value: 'forest',\n  }\n  \n  const { position } = useControls({\n    position: { x: 0, y: 0, z: 0 },\n  })\n\n  const { hdri } = useControls('environment/lighting', { hdri: environmentControls })\n\n  console.log(hdri)\n\n  return (\n    <>\n      <PerspectiveCamera makeDefault />\n      {/* <OrbitControls target={[1, 1, 0]} /> */}\n\n      <Stage adjustCamera={false} contactShadow={true} shadows={true}>\n\n        {/* <Box position={[0,0,-20]}/> */}\n        {/* <Box position={[0,0,-30]}/> */}\n\n        <Suspense fallback={null}>\n          <Environment preset={hdri} background={false} />\n        </Suspense>\n\n        <LowPolyJet />\n        {/* <AnimationExperiment /> */}\n      </Stage>\n    </>\n  );\n}\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef, useMemo } from 'react'\nimport { useGLTF, useTexture } from '@react-three/drei'\nimport * as THREE from 'three'\nimport { useFrame } from \"@react-three/fiber\"\n\nconst filePath = window.location.href + '/models/Robot.glb'\n\nexport default function LinesRobot(props) {\n  const texture = useTexture(window.location.href + '/images/flakes.png')\n\n  const materialProps = {\n    clearcoat: 1.0,\n    clearcoatRoughness: 0,\n    metalness: 0.65,\n    roughness: 0.3,\n    color: 'blue',\n    normalMap: texture,\n    normalScale: [0.3, 0.3],\n    'normalMap-wrapS': THREE.RepeatWrapping,\n    'normalMap-wrapT': THREE.RepeatWrapping,\n    'normalMap-repeat': [30, 30],\n    'normalMap-anisotropy': 16,\n    transmission: 0.6,\n    transparent: true\n  }\n\n  const group = useRef()\n  const { nodes, materials } = useGLTF(filePath)\n\n  const edges = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_1.geometry), [nodes])\n  const edges1 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_2.geometry), [nodes])\n  const edges2 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\n  const edges3 = useMemo(() => new THREE.EdgesGeometry(nodes.Cube001_3.geometry), [nodes])\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    if (group.current != null) {\n      group.current.rotation.y = group.current.rotation.y += 0.003\n    }\n  })\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <group position={[0, .85, 0]}>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_1.geometry}\n          material={materials.Mat1}\n        >\n        </mesh>\n        <lineSegments geometry={edges}>\n          <lineBasicMaterial color=\"black\" />\n        </lineSegments>\n        <lineSegments geometry={edges1}>\n          <lineBasicMaterial color=\"black\" />\n        </lineSegments>\n        <lineSegments geometry={edges2}>\n          <lineBasicMaterial color=\"black\"  />\n        </lineSegments>\n        <lineSegments geometry={edges3}>\n          <lineBasicMaterial color=\"black\" />\n        </lineSegments>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_2.geometry}\n          material={materials.Mat2}\n        />\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_3.geometry}\n          material={materials.Mat3}\n        >\n        </mesh>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_3.geometry}\n          material={materials.Mat3}\n        >\n          <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} />\n        </mesh>\n        <mesh\n          castShadow\n          receiveShadow\n          geometry={nodes.Cube001_4.geometry}\n          material={materials.Mat4}\n        >\n\n        </mesh>\n      </group>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Cube002.geometry}\n        material={materials['Material.001']}\n        position={[0, .85, 0.03]}\n      >\n        <meshPhysicalMaterial {...materialProps} side={THREE.BackSide} transmission={.9} />\n      </mesh>\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)\n","import React, { useRef, useMemo } from 'react'\nimport { useGLTF, useTexture } from '@react-three/drei'\nimport * as THREE from 'three'\nimport { useFrame } from \"@react-three/fiber\"\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\n\nexport default function OxygenContainer(props) {\n  const texture = useTexture(window.location.href + '/images/flakes.png')\n\n  const materialProps = {\n    clearcoat: 1.0,\n    clearcoatRoughness: 0,\n    metalness: 0.65,\n    roughness: 0.3,\n    normalMap: texture,\n    normalScale: [0.3, 0.3],\n    'normalMap-wrapS': THREE.RepeatWrapping,\n    'normalMap-wrapT': THREE.RepeatWrapping,\n    'normalMap-repeat': [60, 60],\n    'normalMap-anisotropy': 16,\n    transmission: 0.99,\n    transparent: true,\n    side: THREE.DoubleSide,\n    opacity: 0.2,\n    color: 'teal'\n  }\n\n  const group = useRef()\n\n  const { nodes, materials } = useGLTF(filePath)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Container.geometry}\n        material={materials['Material.003']}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.GlassDome.geometry}\n        material={materials.Glass}\n      >\n        <meshPhysicalMaterial {...materialProps}/>\n      </mesh>\n      \n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Container001.geometry}\n        material={materials['Material.002']}\n        position={[0, 0.01, 0]}\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)\n","import React, { useRef, useMemo } from 'react'\nimport { useGLTF, useTexture } from '@react-three/drei'\nimport * as THREE from 'three'\nimport { useFrame } from \"@react-three/fiber\"\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\n\nexport default function OxygenContainer2(props) {\n  const texture = useTexture(window.location.href + '/images/flakes.png')\n\n  const materialProps = {\n    clearcoat: 1.0,\n    clearcoatRoughness: 0.2,\n    metalness: 0.0,\n    roughness: 0.1,\n    color: 'teal',\n    // color: '#195e23',\n    normalMap: texture,\n    normalScale: [0.3, 0.3],\n    'normalMap-wrapS': THREE.RepeatWrapping,\n    'normalMap-wrapT': THREE.RepeatWrapping,\n    'normalMap-repeat': [90, 90],\n    'normalMap-anisotropy': 16,\n    transmission: 0.93,\n    transparent: true,\n    opacity: 1\n  }\n\n  const group = useRef()\n\n  const { nodes, materials } = useGLTF(filePath)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Container.geometry}\n        material={materials['Material.003']}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.GlassDome.geometry}\n        material={materials.Glass}\n      >\n        <meshPhysicalMaterial {...materialProps}  />\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Container001.geometry}\n        material={materials['Material.002']}\n        position={[0, 0.01, 0]}\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)\n","import React, { useRef, useMemo } from 'react'\nimport { useGLTF, useTexture } from '@react-three/drei'\nimport * as THREE from 'three'\nimport { useFrame } from \"@react-three/fiber\"\nconst filePath = window.location.href + '/models/OxygenContainer2.glb'\n\nexport default function OxygenContainer3(props) {\n  const texture = useTexture(window.location.href + '/images/flakes.png')\n\n  const materialProps = {\n    // clearcoat: 1.0,\n    // clearcoatRoughness: 0.2,\n    metalness: 0.0,\n    roughness: 0.0,\n    color: '#6cccf5',\n    // color: 'blue',\n    normalMap: texture,\n    normalScale: [0.3, 0.3],\n    reflectivity: .5,\n    'normalMap-wrapS': THREE.RepeatWrapping,\n    'normalMap-wrapT': THREE.RepeatWrapping,\n    'normalMap-repeat': [90, 90],\n    'normalMap-anisotropy': 16,\n    transmission: .9,\n    transparent: true,\n    opacity: 1,\n    exposure: 1,\n    envMapIntensity: 1\n  }\n\n  const group = useRef()\n\n  const { nodes, materials } = useGLTF(filePath)\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <mesh \n        castShadow\n        receiveShadow\n        geometry={nodes.Container.geometry}\n        material={materials['Material.003']}\n      />\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.GlassDome.geometry}\n        material={materials.Glass}\n      >\n        <meshPhysicalMaterial {...materialProps}  />\n      </mesh>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Container001.geometry}\n        material={materials['Material.002']}\n        position={[0, 0.01, 0]}\n      />\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)\n","/*\nAuto-generated by: https://github.com/pmndrs/gltfjsx\n*/\n\nimport React, { useRef } from 'react'\nimport { useGLTF, MeshDistortMaterial } from '@react-three/drei'\nimport { useFrame } from '@react-three/fiber'\nimport { useEffect } from 'react';\n\nconst filePath = window.location.href + '/models/AbstractSphere.glb'\n\nexport default function AbstractSphere(props) {\n  const group = useRef()\n  const { nodes } = useGLTF(filePath)\n  const randomRotationOffset = Math.random() * 180\n\n  useEffect(() => {\n    group.current.position.x = props.animationOffset ? props.animationOffset[0] : 0\n    group.current.position.z = props.animationOffset ? props.animationOffset[2] : 0\n    group.current.rotation.x = randomRotationOffset\n    group.current.rotation.y = randomRotationOffset\n    group.current.rotation.z = randomRotationOffset\n  });\n\n  useFrame(({ clock }) => {\n    const t = (1 + Math.sin(clock.getElapsedTime() * 1.5)) / 2\n    group.current.position.y = (t / 3) + props.animationOffset ? props.animationOffset[1] : 0\n    group.current.rotation.x = group.current.rotation.z += 0.005\n  })\n\n  return (\n    <group ref={group} {...props} dispose={null} position={[0,1.2,0]}>\n      <mesh\n        castShadow\n        receiveShadow\n        geometry={nodes.Icosphere003.geometry}\n        material={nodes.Icosphere003.material}\n        scale={[1.06, 1.06, 1.06]}\n      >\n        <mesh geometry={nodes.Icosphere003.geometry} castShadow receiveShadow>\n          <MeshDistortMaterial color={props.color} flatShading roughness={1} metalness={0.5} factor={15} speed={5} />\n        </mesh>\n        <mesh geometry={nodes.Icosphere003.geometry}>\n          <meshBasicMaterial wireframe color={props.color}/>\n        </mesh>\n      </mesh>\n    </group>\n  )\n}\n\nuseGLTF.preload(filePath)\n","import LinesRobot from '../objects/LinesRobot'\nimport OxygenContainer from '../objects/OxygenContainer'\nimport OxygenContainer2 from '../objects/OxygenContainer2'\nimport OxygenContainer3 from '../objects/OxygenContainer3'\nimport AbstractSphere from '../objects/AbstractSphere'\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport React, { useState, useEffect, Suspense } from 'react';\n\nexport default function Scene({ sceneIndex }) {\n  const environmentOptions = [\n    'studio',\n    'sunset',\n    'dawn',\n    'night',\n    'warehouse',\n    'forest',\n    'apartment',\n    'city',\n    'park',\n    'lobby',\n  ]\n\n  return (\n    <>\n      <PerspectiveCamera makeDefault position={[0, 4, 13]} />\n\n      {/* <directionalLight position={[-10, -10, -5]} intensity={1} /> */}\n      {/* <ambientLight /> */}\n      {/* <pointLight position={[10, 10, 10]} /> */}\n\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\n        <OrbitControls target={[1, 1, 0]} />\n\n        <OxygenContainer position={[-6, 0, 0]} rotation={[0, 90, 0]} />\n        <AbstractSphere animationOffset={[-6, 2, 0]} color=\"black\" />\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[-6, 2, 0]} color=\"black\" />\n\n        {/*  <OxygenContainer2 rotation={[0, 80, 0]} />\n        <AbstractSphere animationOffset={[0, 2, 0]} color=\"#bbbbbb\" />\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[0, 2, 0]} color=\"#bbbbbb\" /> \n\n        <OxygenContainer3 rotation={[0, 90, 0]} position={[6, 0, 0]} />\n        <AbstractSphere animationOffset={[6, 2, 0]} color=\"red\" />\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[6, 2, 0]} color=\"red\" />*/}\n      </Stage>\n    </>\n  );\n}\n\n","import OxygenContainer2 from '../objects/OxygenContainer2'\nimport Box from '../objects/Box'\nimport AbstractSphere from '../objects/AbstractSphere'\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera, Environment, useTexture, Reflector } from '@react-three/drei';\nimport { Canvas, useThree } from '@react-three/fiber';\nimport React, { useState, useEffect, Suspense, useRef, useMemo } from 'react';\nimport * as THREE from 'three'\nimport { MeshPhysicalMaterial } from 'three';\n\nfunction MidsectionPlane() {\n  const plane = useRef()\n\n  const { viewport, aspect } = useThree()\n  const texture = useTexture(window.location.href + '/images/majestic_deer_Benoît_FLEURY.png')\n  const alpha = useTexture(window.location.href + '/images/AlphamapTest.gif')\n  useMemo(() => (texture.minFilter = THREE.LinearFilter), [])\n\n  const adaptedHeight = 3800 * (aspect > 5000 / 3800 ? viewport.width / 5000 : viewport.height / 3800)\n  const adaptedWidth = 5000 * (aspect > 5000 / 3800 ? viewport.width / 5000 : viewport.height / 3800)\n\n  return (\n    <>\n      <mesh ref={plane} position={[0, 4, -8]} scale={[adaptedWidth + 1, adaptedHeight + 0.5, 1]}>\n        <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n        <meshBasicMaterial\n          attach=\"material\"\n          map={texture}\n          transparent={true}\n        />\n        {/* <meshBasicMaterial\n          attach=\"material\"\n          map={texture}\n          alphaMap={alpha}\n          transparent={true}\n        /> */}\n      </mesh>\n\n      {/* <mesh ref={plane} position={[0, 4, -4]} scale={[adaptedWidth + 2, adaptedHeight + 1.5, 2]}>\n        <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n        <meshBasicMaterial attach=\"material\" map={texture} alphaMap={alpha} transparent={true} />\n      </mesh> */}\n    </>\n  )\n}\n\nfunction ReflectorPlane() {\n  return (\n    <Reflector\n    position={[0, 0, -2]}\n      rotation={[-Math.PI / 2, 0, 0]}\n      args={[15, 15]}\n      resolution={1024}\n      mirror={0.001}\n      mixBlur={1.0}\n      mixBlur={0}\n      mixStrength={1}\n      depthScale={1}\n      minDepthThreshold={0.9}\n      maxDepthThreshold={1}\n      depthToBlurRatioBias={0.25}\n      distortion={0}\n      opacity={.5}\n      transparent={true}\n      // distortionMap={distortionTexture}\n      debug={0}\n    >\n      {(Material, props) => <Material color=\"#808F8D\" metalness={1} normalScale={[1, 1]} {...props} />}\n    </Reflector>\n  )\n}\n\nexport default function Scene() {\n  return (\n    <>\n      <Stage adjustCamera={false} contactShadow={true} shadows={true} >\n        <MidsectionPlane />\n        <ReflectorPlane />\n        {/* <Box/> */}\n        {/* <OxygenContainer2 scale={[.5, .5, .5]}/>\n        <OxygenContainer2 position={[2.4, 0, .4]} scale={[.4, .4, .4]} rotation={[0,Math.PI/.7,0]}/> */}\n        {/* <AbstractSphere /> */}\n        <Suspense fallback={null}>\n          <Environment preset={'forest'} background={false} />\n        </Suspense>\n      </Stage>\n    </>\n  );\n}\n\n","import LinesRobot from '../objects/LinesRobot'\nimport OxygenContainer from '../objects/OxygenContainer'\nimport OxygenContainer2 from '../objects/OxygenContainer2'\nimport OxygenContainer3 from '../objects/OxygenContainer3'\nimport AbstractSphere from '../objects/AbstractSphere'\nimport { OrbitControls, Stats, Stage, Loader, PerspectiveCamera } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport React, { useState, useEffect, Suspense } from 'react';\n\nexport default function Scene({ sceneIndex }) {\n  const environmentOptions = [\n    'park',\n    'sunset',\n    'dawn',\n    'night',\n    'warehouse',\n    'forest',\n    'apartment',\n    'studio',\n    'city',\n    'lobby',\n  ]\n\n  return (\n    <>\n      <Stage adjustCamera={false} intensity={.5} contactShadow={true} shadows={true}>\n        <OxygenContainer3 rotation={[0, 90, 0]} position={[12, 0, 0]} />\n        <AbstractSphere scale={[0.7, 0.7, 0.7]} animationOffset={[6, 2, 0]} color=\"red\" />\n      </Stage>\n    </>\n  );\n}\n\n","import create from 'zustand'\n\nconst useStore = create(set => ({\n  sceneIndex: 0,\n  selectScene0: () => set(() => {\n    console.log(\"HERE\")\n    return { sceneIndex: 0 }\n  }),\n  selectScene1: () => set(() => ({ sceneIndex: 1 })),\n  selectScene2: () => set(() => ({ sceneIndex: 2 })),\n  selectScene3: () => set(() => ({ sceneIndex: 3 })),\n  bears: 0,\n  increasePopulation: () => set(state => ({ bears: state.bears + 1 })),\n  removeAllBears: () => set({ bears: 0 })\n}))\n\nexport default useStore","import { OrbitControls, Loader, PerspectiveCamera } from '@react-three/drei';\nimport { Canvas } from '@react-three/fiber';\nimport React, { Suspense } from 'react';\n\nimport Scene1 from './scenes/Scene1';\nimport Scene2 from './scenes/Scene2';\nimport Scene3 from './scenes/Scene3';\nimport Scene4 from './scenes/Scene4';\n\nimport useStore from '../../store'\n\nexport default function ThreeCanvas() {\n  const scenes = [\n    Scene1,\n    Scene2,\n    Scene3,\n    Scene4\n  ]\n\n  const sceneIndex = useStore(state => state.sceneIndex)\n\n  return (\n    <>\n      <Canvas colorManagement={true} invalidateFrameloop pixelRatio={[1, 2]}>\n\n        <Suspense fallback={null}>\n          {React.createElement(scenes[sceneIndex])}\n        </Suspense>\n\n        {/* <Stats /> */}\n\n\n\n      </Canvas>\n\n      <Loader />\n    </>\n  );\n}\n\n","// HTMLContent.js\n// Throw all the raw HTML content here. This is all rendered outside the context of the canvas,\n// so don't try to do anything fancy with Three.js.\n\nimport Menu from './Menu'\nimport useStore from '../../store'\n\nfunction Navigation() {\n  const selectScene0 = useStore(state => state.selectScene0)\n  const selectScene1 = useStore(state => state.selectScene1)\n  const selectScene2 = useStore(state => state.selectScene2)\n  const selectScene3 = useStore(state => state.selectScene3)\n\n  return (\n    <>\n      <div className='button-overlay'>\n        <div className='flex-container' style={{justifyContent: \"space-around\"}}>\n          <button className=\"btn\" onClick={selectScene0}>sandbox 1</button>\n          <button className=\"btn\" onClick={selectScene1}>sandbox 2</button>\n          <button className=\"btn\" onClick={selectScene2}>sandbox 3</button>\n          <button className=\"btn\" onClick={selectScene3}>sandbox 4</button>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default function HTMLContent() {\n  return (\n    <div className=\"html-content-container\">\n      {/* <Menu /> */}\n      <Navigation></Navigation>\n    </div>\n  )\n}","import './App.css';\nimport ThreeCanvas from './components/three_components/ThreeCanvas'\nimport HTMLContent from './components/html_components/HTMLContent'\nimport React, { useState, useEffect } from 'react';\n\nimport useStore from './store.js'\n\nfunction App() {\n  return (\n    <>\n      <HTMLContent/>\n      <ThreeCanvas/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}